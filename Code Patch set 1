//Clock generation logic
Clk = 0
while var == 1 :
  sleep(100)
  clk = clk ^ 1
  pin6.write_digital(clk)



from microbit import *

RREG = 1
WREG = 0
datatosend = 0
SPI_temp_32b = [0 for i in range(10)]


NO_OP = 0x00
STATUS = 0x01
EN_INT = 0x02
EN_INT2 = 0x03
MNGR_INT = 0x04
MNGR_DYN = 0x05
SW_RST = 0x08
SYNCH = 0x09
FIFO_RST = 0x0A
INFO = 0x0F
CNFG_GEN = 0x10
CNFG_CAL = 0x12
CNFG_EMUX = 0x14
CNFG_ECG = 0x15
CNFG_RTOR1 = 0x1D
CNFG_RTOR2 = 0x1E
ECG_FIFO_BURST = 0x20
ECG_FIFO = 0x21
RTOR = 0x25
NO_OP = 0x7F

def MAX30003_Reg_Read(Reg_address):

   pin16.write_digital(0) 
   SPI_TX_Buff = (Reg_address<<1 ) | RREG
   spi.write (SPI_TX_Buff )
      
   for num in range(0,3):
      SPI_temp_32b[num] = spi.read(4);
   
   pin16.write_digital(1) 
   return

def MAX30003_Reg_Write (WRITE_ADDRESS, data):
      datatosend = (WRITE_ADDRESS<<1) | WREG
      pin16.write_digital(0) 
      
      sleep(2)
      spi.write (datatosend)
      spi.write (data>>16)
      spi.write (data>>8)
      spi.write (data)
      sleep(2)

      pin16.write_digital(1) 
      return
    
def MAX30003_begin():
      MAX30003_Reg_Write(SW_RST,0x000000)
      sleep(100)
      MAX30003_Reg_Write(CNFG_GEN, 0x081007)
      sleep(100)
      MAX30003_Reg_Write(CNFG_CAL, 0x720000)
      sleep(100)
      MAX30003_Reg_Write(CNFG_EMUX,0x0B0000)
      sleep(100)
      MAX30003_Reg_Write(CNFG_ECG, 0x005000)
      sleep(100)
      MAX30003_Reg_Write(CNFG_RTOR1, 0x3fc600)
      sleep(100)
      MAX30003_Reg_Write(SYNCH,0x000000)
      sleep(100)
      return
    
pin16.write_digital(1) 
spi.init(baudrate=115200, bits=8, mode=0, sclk=pin13, mosi=pin15, miso=pin14) 
    
MAX30003_begin()
MAX30003_Reg_Read(ECG_FIFO)
data0 = SPI_temp_32b[0]
data0 = data0 <<24
data1 = SPI_temp_32b[1]
data1 = data1 <<16
data2 = SPI_temp_32b[2]
data2 = data2 >>6
ecgdata = data0 | data1 | data2    

